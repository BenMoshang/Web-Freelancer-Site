// Default perspective value (you can adjust this for a stronger/weaker effect)
$parallax-perspective: 2 !default;

// ---------------------------------------------------------------------
// Parallax Container Mixin
// ---------------------------------------------------------------------
// Use this mixin on the container element that holds your parallax layers.
// It sets up a fixed perspective and preserves 3D transforms for its children.
@mixin parallax-container($perspective: $parallax-perspective) {
	// The perspective is multiplied by 1px to work with our depth values.
	perspective: $perspective * 1px;
	// Hide overflow (you might use auto for scrolling containers)
	// Ensure that child transforms maintain their 3D space.
	transform-style: preserve-3d;
	position: relative;
	overflow-y: auto;
	scroll-behavior: smooth;
	min-height: 100vh;
	-webkit-transform-style: preserve-3d; // iOS support
	-webkit-perspective: $perspective * 0.0625rem; // iOS support
	-webkit-backface-visibility: hidden; // iOS support

	// Enable touch scrolling on mobile devices
	-webkit-overflow-scrolling: touch;
	// Prevent overscroll bounce effects
	overscroll-behavior: contain;
}

// ---------------------------------------------------------------------
// Parallax Item Mixin
// ---------------------------------------------------------------------
// Apply this mixin to any child element that you wish to have a parallax effect.
// $depth: A numeric value (e.g., -0.4, 0.2, etc.) that controls the parallax depth.
//         Negative values push the element away (background effect),
//         while positive values pull it forward (foreground effect).
// $perspective: Should match the value used in the container.
@mixin parallax-item($depth: 0, $perspective: $parallax-perspective) {
	// The transform uses translateZ to move the element in 3D.
	// The scale corrects the size change caused by perspective.
	// Scale = 1 + abs($depth) to ensure proper scaling
	transform: translateZ(#{$depth * $perspective * 1px}) scale(#{1 + abs($depth)});
	// z-index is calculated so that negative depths yield lower (or even negative) values.
	// Adjust this as needed for your stacking order.
	z-index: floor($depth * 1000);
}

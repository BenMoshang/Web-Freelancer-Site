/**
 * @file Shadow System - Provides a comprehensive shadow management system with dark/light mode support
 * @module shadows
 * @description
 * This module implements a flexible shadow system with three elevation levels (low, medium, high)
 * and an optional inset style. It handles color scheme changes automatically using the 
 * colors-functions (including a light-dark helper) and the theme mixin.
 */

@use '../../abstracts/colors/colors-functions' as cf;
@use '../../abstracts/colors/colors-variables' as cv;
@use '../../abstracts/themes/themes' as themes;
@use 'sass:map';

/*--------------------------------------------------
  Raw color retrieval function (without dictionary lookup)
  Instead of looking up values from a map, this function directly returns
  a raw HSL color based on the theme and color name.
-----------------------------------------------------*/

@function get-raw-color($scale, $color) {
	@if $scale == 'light' {
		@if $color == 'darkest' {
			@return 75 10% 8%;
		} @else if $color == 'darker' {
			@return 75 9% 14%;
		} @else if $color == 'dark' {
			@return 75 8% 20%;
		} @else if $color == 'medium' {
			@return 75 7% 30%;
		} @else if $color == 'light' {
			@return 75 6% 50%;
		} @else if $color == 'lighter' {
			@return 75 4% 75%;
		} @else if $color == 'lightest' {
			@return 75 10% 89%;
		} @else {
			@error "Unknown light scale color: #{$color}";
		}
	} @else if $scale == 'dark' {
		@if $color == 'darkest' {
			@return 240 10% 8%;
		} @else if $color == 'darker' {
			@return 240 9% 14%;
		} @else if $color == 'dark' {
			@return 240 8% 20%;
		} @else if $color == 'medium' {
			@return 240 7% 30%;
		} @else if $color == 'light' {
			@return 240 6% 50%;
		} @else if $color == 'lighter' {
			@return 240 4% 75%;
		} @else if $color == 'lightest' {
			@return 240 4% 95%;
		} @else {
			@error "Unknown dark scale color: #{$color}";
		}
	} @else {
		@error "Scale must be either 'light' or 'dark'";
	}
}
@mixin realism-shadow {
	box-shadow: inset 0 -0.25rem 0.375rem -0.25rem cf.get-light-dark('100', '500');
}
/*--------------------------------------------------
  Example text pop-up shadow (uses light-dark helper)
-----------------------------------------------------*/
$text-pop-up-top-color: cf.get-light-dark('100', '500');

@mixin text-pop-up-top {
	text-shadow:
		0 0.0625rem 0 $text-pop-up-top-color,
		0 0.125rem 0 $text-pop-up-top-color,
		0 0.1875rem 0 $text-pop-up-top-color,
		0 0.25rem 0 $text-pop-up-top-color,
		0 0.3125rem 0 $text-pop-up-top-color,
		0 0.375rem 0 $text-pop-up-top-color,
		0 0.4375rem 0 $text-pop-up-top-color,
		0 0.5rem 0 $text-pop-up-top-color,
		0 0.5625rem 0 $text-pop-up-top-color;
}

/*--------------------------------------------------
  Core shadow mixin with theme support
  This mixin sets a CSS custom property based on the current color scheme
  and builds the final box-shadow by iterating over a list of shadow values.
-----------------------------------------------------*/
/**
 * Core mixin that applies the shadow with both light and dark colors.
 * @param {String} $light-value - HSL values for light mode.
 * @param {String} $dark-value - HSL values for dark mode.
 * @param {List} $shadows - List of shadow offset/blur values.
 * @param {Number|List} $opacities - Single opacity or list for each shadow.
 */
@mixin apply-shadow($light-value, $dark-value, $shadows, $opacities) {
	// Set the default shadow color to dark value.
	--shadow-color: #{$dark-value};

	// For system preference showing light scheme.
	@media (prefers-color-scheme: light) {
		--shadow-color: #{$light-value};
	}

	// For explicit theme selection.
	html[data-theme='light'] & {
		--shadow-color: #{$light-value};
	}
	html[data-theme='dark'] & {
		--shadow-color: #{$dark-value};
	}

	// Build the box-shadow list dynamically.
	$shadow-list: ();
	@for $i from 1 through length($shadows) {
		$shadow: nth($shadows, $i);
		$opacity: nth($opacities, min($i, length($opacities)));
		$shadow-list: append($shadow-list, #{$shadow} hsl(var(--shadow-color) / #{$opacity}), comma);
	}
	box-shadow: $shadow-list;
}

/*--------------------------------------------------
  Shadow Configurations
  Each configuration includes a list of shadow definitions and corresponding opacities.
-----------------------------------------------------*/
$shadow-low: (
	shadows: (
		0.0187rem 0.0313rem 0.0437rem,
		0.025rem 0.05rem 0.0625rem -0.075rem,
		0.0625rem 0.125rem 0.1563rem -0.1563rem
	),
	opacities: 0.34
);

$shadow-medium: (
	shadows: (
		0.0187rem 0.0313rem 0.0437rem,
		0.05rem 0.1rem 0.125rem -0.05rem,
		0.1313rem 0.2562rem 0.325rem -0.1062rem,
		0.3125rem 0.625rem 0.7875rem -0.1563rem
	),
	opacities: 0.36
);

$shadow-high: (
	shadows: (
		0.0187rem 0.0313rem 0.0437rem,
		0.0938rem 0.1812rem 0.2313rem -0.025rem,
		0.1688rem 0.3375rem 0.425rem -0.0437rem,
		0.2813rem 0.5563rem 0.7rem -0.0688rem,
		0.4437rem 0.8938rem 1.125rem -0.0875rem,
		0.7rem 1.3938rem 1.7563rem -0.1125rem,
		1.0625rem 2.1187rem 2.6688rem -0.1313rem,
		0.8562rem 1.7188rem 2.1437rem -0.125rem,
		1.5625rem 3.125rem 3.9312rem -0.1563rem
	),
	opacities: (
		0.28,
		0.28,
		0.28,
		0.28,
		0.27,
		0.27,
		0.27,
		0.27,
		0.27
	)
);

/*--------------------------------------------------
  Individual Shadow Mixins
  These mixins define the low, medium, high (and optionally inset) shadows.
  They now use the get-raw-color function to retrieve HSL values without a dictionary lookup.
-----------------------------------------------------*/
/**
 * Applies a low elevation shadow.
 * @param {String} $light-color ['lightest'] - Color name for light mode.
 * @param {String} $dark-color ['darkest'] - Color name for dark mode.
 */
@mixin shadow-low($light-color: 'lightest', $dark-color: 'darkest') {
	$light-value: get-raw-color('light', $light-color);
	$dark-value: get-raw-color('dark', $dark-color);
	@include apply-shadow(
		$light-value,
		$dark-value,
		map.get($shadow-low, shadows),
		map.get($shadow-low, opacities)
	);
}

/**
 * Applies a medium elevation shadow.
 * @param {String} $light-color ['lightest'] - Color name for light mode.
 * @param {String} $dark-color ['lightest'] - Color name for dark mode.
 */
@mixin shadow-medium($light-color: 'lightest', $dark-color: 'lightest') {
	$light-value: get-raw-color('light', $light-color);
	$dark-value: get-raw-color('dark', $dark-color);
	@include apply-shadow(
		$light-value,
		$dark-value,
		map.get($shadow-medium, shadows),
		map.get($shadow-medium, opacities)
	);
}

/**
 * Applies a high elevation shadow.
 * @param {String} $light-color ['100'] - Color name for light mode.
 * @param {String} $dark-color ['dark'] - Color name for dark mode.
 */
@mixin shadow-high($light-color: '100', $dark-color: 'dark') {
	$light-value: get-raw-color('light', $light-color);
	$dark-value: get-raw-color('dark', $dark-color);
	@include apply-shadow(
		$light-value,
		$dark-value,
		map.get($shadow-high, shadows),
		map.get($shadow-high, opacities)
	);
}

/**
 * Applies an inset shadow.
 * (You can customize the inset parameters by changing the shadow values and opacities below.)
 * @param {String} $light-color ['100'] - Color name for light mode.
 * @param {String} $dark-color ['dark'] - Color name for dark mode.
 */
@mixin shadow-inset($light-color: '100', $dark-color: 'dark') {
	$light-value: get-raw-color('light', $light-color);
	$dark-value: get-raw-color('dark', $dark-color);
	// Define inset shadow(s). Adjust these values as needed.
	$inset-shadows: (inset 0.0625rem 0.125rem 0.25rem);
	$inset-opacities: 0.2;
	@include apply-shadow($light-value, $dark-value, $inset-shadows, $inset-opacities);
}

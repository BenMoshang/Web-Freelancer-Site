/**
 * @file Shadow System - Provides a comprehensive shadow management system with dark/light mode support
 * @module shadows
 * @description
 * This module implements a flexible shadow system with three elevation levels (low, medium, high)
 * and an optional inset style. It handles color scheme changes automatically using the 
 * colors-functions (including a light-dark helper) and the theme mixin.
 */

@use '../../abstracts/colors/colors-functions' as cf;
@use '../../abstracts/colors/colors-variables' as cv;
@use '../../abstracts/themes/themes' as themes;
@use 'sass:map';

/*--------------------------------------------------
  Example text pop-up shadow (uses light-dark helper)
-----------------------------------------------------*/
// Configuration map for text pop-up shadow
$text-pop-up-config: (
	base-color: cf.get-light-dark('600', '800'),
	steps: 8,
	start-offset: 0.01em,
	increment: 0.01em,
	opacity: 1
);

@mixin text-pop-up-top($config: $text-pop-up-config) {
	$shadows: ();
	$color: map.get($config, 'base-color');
	$steps: map.get($config, 'steps');
	$offset: map.get($config, 'start-offset');
	$increment: map.get($config, 'increment');

	@for $i from 1 through $steps {
		$current-offset: $offset * $i;
		$shadows: append($shadows, 0 $current-offset 0 $color, comma);
	}

	text-shadow: $shadows;
}

$shadow-low: (
	shadows: (
		0.0187rem 0.0313rem 0.0437rem,
		0.025rem 0.05rem 0.0625rem -0.075rem,
		0.0625rem 0.125rem 0.1563rem -0.1563rem
	),
	opacities: 0.34
);

$shadow-medium: (
	shadows: (
		0.0187rem 0.0313rem 0.0437rem,
		0.05rem 0.1rem 0.125rem -0.05rem,
		0.1313rem 0.2562rem 0.325rem -0.1062rem,
		0.3125rem 0.625rem 0.7875rem -0.1563rem
	),
	opacities: 0.36
);

$shadow-high: (
	shadows: (
		0.0187rem 0.0313rem 0.0437rem,
		0.0938rem 0.1812rem 0.2313rem -0.025rem,
		0.1688rem 0.3375rem 0.425rem -0.0437rem,
		0.2813rem 0.5563rem 0.7rem -0.0688rem,
		0.4437rem 0.8938rem 1.125rem -0.0875rem,
		0.7rem 1.3938rem 1.7563rem -0.1125rem,
		1.0625rem 2.1187rem 2.6688rem -0.1313rem,
		0.8562rem 1.7188rem 2.1437rem -0.125rem,
		1.5625rem 3.125rem 3.9312rem -0.1563rem
	),
	opacities: (
		0.28,
		0.28,
		0.28,
		0.28,
		0.27,
		0.27,
		0.27,
		0.27,
		0.27
	)
);

// Added helper mixin for box-shadow generation using config maps and get-light-dark
@mixin _apply-shadow($cfg, $inset: false) {
	$shadows: map.get($cfg, shadows);
	$opacities: map.get($cfg, opacities);
	$shadow-list: ();
	@for $i from 1 through length($shadows) {
		$dim: nth($shadows, $i);
		@if type-of($opacities) == 'list' {
			$opacity: nth($opacities, $i);
		} @else {
			$opacity: $opacities;
		}
		$color: cf.get-light-dark('100', '500', $opacity, $opacity);
		// Using inspect to convert the dimensions list to a string
		$shadow-value: if($inset, 'inset ', '') + inspect($dim) + ' ' + $color;
		$shadow-list: append($shadow-list, $shadow-value, comma);
	}
	box-shadow: $shadow-list;
}

// Updated shadow mixins to use corresponding config and support inset option
@mixin shadow-low($inset: false) {
	@include _apply-shadow($shadow-low, $inset);
}

@mixin shadow-medium($inset: false) {
	@include _apply-shadow($shadow-medium, $inset);
}

@mixin shadow-high($inset: false) {
	@include _apply-shadow($shadow-high, $inset);
}

// Additional mixin for SVG drop-shadow filter using shadow config
// This mixin accepts a $level parameter ('low', 'medium', or 'high') to choose the shadow config
@mixin shadow-drop($level: 'low') {
	@if $level == 'low' {
		$cfg: $shadow-low;
	} @else if $level == 'medium' {
		$cfg: $shadow-medium;
	} @else if $level == 'high' {
		$cfg: $shadow-high;
	} @else {
		@error "Invalid shadow level '#{$level}'. Use 'low', 'medium', or 'high'.";
	}
	$shadows: map.get($cfg, shadows);
	$opacities: map.get($cfg, opacities);
	$ds-list: ();
	@for $i from 1 through length($shadows) {
		$dim: nth($shadows, $i);
		// Extract first three values for drop-shadow (offset-x, offset-y, blur)
		$ox: nth($dim, 1);
		$oy: nth($dim, 2);
		$blur: nth($dim, 3);
		@if type-of($opacities) == 'list' {
			$opacity: nth($opacities, $i);
		} @else {
			$opacity: $opacities;
		}
		$color: cf.get-light-dark('100', '500', $opacity, $opacity);
		// Build drop-shadow value; drop-shadow does not support inset
		$ds: unquote('drop-shadow(#{$ox} #{$oy} #{$blur} #{$color})');
		$ds-list: append($ds-list, $ds, space);
	}
	filter: $ds-list;
}

@use '../../abstracts/colors/colors-functions' as cf;
@use '../../abstracts/colors/colors-variables' as cv;
@use '../../abstracts/themes/themes' as themes;
@use 'sass:map';

/**
* *mixins used in the shadow system:
*
* *@mixin apply-shadow($elevation: 'low', $inset: false)
* @param {String} $elevation - The elevation level to apply (low, medium, high)
* @param {Boolean} $inset - Whether to apply an inset shadow (default: false)
*
* Example:
* .card {
*   @include apply-shadow('medium');
* }
*
* .inset-card {
*   @include apply-shadow('low', true);
* }
*
* USED FOR SVGS IF NEEDED:
* *@mixin apply-shadow-drop($level: 'low')
* Creates a drop shadow effect based on the specified level
* @param {String} $level - The shadow level to apply (low, medium, high)
*
* Example:
* .svg-icon {
*   @include shadow-drop('high');
* }
**/

/*--------------------------------------------------
3d text pop-up shadow
-----------------------------------------------------*/
// Configuration map for text pop-up shadow
$text-pop-up-config: (
	base-color: cf.get-light-dark('500', '900'),
	steps: 4,
	start-offset: 0.01em,
	increment: 0.01em,
	opacity: 1
);
@mixin apply-3d-text-shadow($config: $text-pop-up-config) {
	$shadows: ();
	$color: map.get($config, 'base-color');
	$steps: map.get($config, 'steps');
	$offset: map.get($config, 'start-offset');
	$increment: map.get($config, 'increment');

	@for $i from 1 through $steps {
		$current-offset: $offset * $i;
		$shadows: append($shadows, 0 $current-offset 0 $color, comma);
	}

	text-shadow: $shadows;
}
/*==================================================
  Shadow System
==================================================*/
/*------configs-----*/
$shadow-low-config: (
	shadows: (
		0.3px 0.5px 0.7px,
		0.4px 0.8px 1px -1.2px,
		1px 2px 2.5px -2.5px
	),
	opacities: 0.34
);

$shadow-medium-config: (
	shadows: (
		0.3px 0.5px 0.7px,
		0.8px 1.6px 2px -0.8px,
		2.1px 4.1px 5.2px -1.7px,
		5px 10px 12.6px -2.5px
	),
	opacities: 0.36
);

$shadow-high-config: (
	shadows: (
		0.3px 0.5px 0.7px,
		1.5px 2.9px 3.7px -0.4px,
		2.7px 5.4px 6.8px -0.7px,
		4.5px 8.9px 11.2px -1.1px,
		7.1px 14.3px 18px -1.4px,
		11.2px 22.3px 28.1px -1.8px,
		17px 33.9px 42.7px -2.1px,
		25px 50px 62.9px -2.5px
	),
	opacities: (
		0.28,
		0.28,
		0.28,
		0.28,
		0.27,
		0.27,
		0.27,
		0.27,
		0.27
	)
);

// Updated _set-shadow-config mixin to build a clean dimension string
@mixin _set-shadow-config($cfg, $inset: false) {
	$shadows: map.get($cfg, shadows);
	$opacities: map.get($cfg, opacities);
	$useList: (type-of($opacities) == 'list');
	$light-shadow-list: ();
	$dark-shadow-list: ();
	@for $i from 1 through length($shadows) {
		$dim: nth($shadows, $i);
		$opacity: if($useList, nth($opacities, $i), $opacities);
		// Manually build a dimension string from the $dim list
		$dim-str: '';
		@each $val in $dim {
			$dim-str: if($dim-str == '', '#{$val}', '#{$dim-str} #{$val}');
		}
		$lightBase: cf.get-color('100', 'light-mode');
		$darkBase: cf.get-color('500', 'dark-mode');
		$lightColor: hsla(hue($lightBase), saturation($lightBase), lightness($lightBase), $opacity);
		$darkColor: hsla(hue($darkBase), saturation($darkBase), lightness($darkBase), $opacity);
		$light-shadow-value: unquote("#{if($inset, 'inset ', '')}#{$dim-str} #{$lightColor}");
		$dark-shadow-value: unquote("#{if($inset, 'inset ', '')}#{$dim-str} #{$darkColor}");
		$light-shadow-list: append($light-shadow-list, $light-shadow-value, comma);
		$dark-shadow-list: append($dark-shadow-list, $dark-shadow-value, comma);
	}
	box-shadow: $light-shadow-list;
	@media (prefers-color-scheme: dark) {
		box-shadow: $dark-shadow-list;
	}
}
/*--------------------------------------------------

-----------------------------------------------------*/
// Consolidated shadow mixin with elevation parameter
@mixin apply-shadow($elevation: 'low', $inset: false) {
	@if $elevation == 'low' {
		@include _set-shadow-config($shadow-low-config, $inset);
	} @else if $elevation == 'medium' {
		@include _set-shadow-config($shadow-medium-config, $inset);
	} @else if $elevation == 'high' {
		@include _set-shadow-config($shadow-high-config, $inset);
	} @else {
		@error "Invalid elevation '#{$elevation}'. Use 'low', 'medium', or 'high'.";
	}
}

// Modified shadow-drop mixin for light/dark mode separation
@mixin apply-shadow-drop($level: 'low') {
	@if $level == 'low' {
		$cfg: $shadow-low-config;
	} @else if $level == 'medium' {
		$cfg: $shadow-medium-config;
	} @else if $level == 'high' {
		$cfg: $shadow-high-config;
	} @else {
		@error "Invalid shadow level '#{$level}'. Use 'low', 'medium', or 'high'.";
	}
	$shadows: map.get($cfg, shadows);
	$opacities: map.get($cfg, opacities);
	$useList: (type-of($opacities) == 'list');
	$light-ds-list: ();
	$dark-ds-list: ();
	@for $i from 1 through length($shadows) {
		$dim: nth($shadows, $i);
		// Extract first three values for drop-shadow (offset-x, offset-y, blur)
		$ox: nth($dim, 1);
		$oy: nth($dim, 2);
		$blur: nth($dim, 3);
		$opacity: if($useList, nth($opacities, $i), $opacities);
		$lightBase: cf.get-color('100', 'light-mode');
		$darkBase: cf.get-color('500', 'dark-mode');
		$lightColor: hsla(hue($lightBase), saturation($lightBase), lightness($lightBase), $opacity);
		$darkColor: hsla(hue($darkBase), saturation($darkBase), lightness($darkBase), $opacity);
		$light-ds: unquote('drop-shadow(#{$ox} #{$oy} #{$blur} ' + $lightColor + ')');
		$dark-ds: unquote('drop-shadow(#{$ox} #{$oy} #{$blur} ' + $darkColor + ')');
		$light-ds-list: append($light-ds-list, $light-ds, space);
		$dark-ds-list: append($dark-ds-list, $dark-ds, space);
	}
	filter: $light-ds-list;
	@media (prefers-color-scheme: dark) {
		filter: $dark-ds-list;
	}
}

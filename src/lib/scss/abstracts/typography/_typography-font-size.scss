@use 'sass:math';
@use '../colors/colors-variables' as cv;
@use '../../base/global-variables' as gv;

/**
 * Base font size and scale ratio for typography system
 */
$typography-base-size: 1.125rem; // 18px
$typography-scale-ratio: 1.414;

/**
 * Standard REM values for vertical rhythm, in multiples of 4px where possible
 */
$typography-standard-rems: (
	0.125,
	0.25,
	0.5,
	1,
	// Base increments
	1.125,
	1.25,
	1.5,
	// Small text sizes
	1.75,
	1.875,
	2,
	// Medium text sizes
	2.25,
	2.5,
	2.75,
	2.875,
	// Large text sizes
	3,
	3.25,
	3.5,
	3.75,
	3.875,
	4 // Display text sizes
);

/**
 * !HELPER FUNCTION: round-to-standard-rems before responsive font size
 * Rounds a font size to the nearest standard REM value
 */
@function round-to-standard-rems($value) {
	$closest-rem: null;
	$smallest-difference: null;

	@each $rem in $typography-standard-rems {
		$difference: abs($value - $rem);
		@if $smallest-difference == null or $difference < $smallest-difference {
			$smallest-difference: $difference;
			$closest-rem: $rem;
		}
	}

	@return $closest-rem;
}

/**
 * Font size scales for different text categories
 */
$typography-scales: (
	'body': (
		'sm': round-to-standard-rems($typography-base-size / math.pow($typography-scale-ratio, 0.5)),
		'md': round-to-standard-rems($typography-base-size / math.pow($typography-scale-ratio, 0.75)),
		'lg': round-to-standard-rems($typography-base-size),
		'xl': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 0.5))
	),
	'heading': (
		'sm': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 1)),
		'md': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 1.5)),
		'lg': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 2)),
		'xl': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 2.5))
	),
	'display': (
		'sm': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 3)),
		'md': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 4)),
		'lg': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 5)),
		'xl': round-to-standard-rems($typography-base-size * math.pow($typography-scale-ratio, 6))
	)
);

/**
 * !HELPER FUNCTION: For rounding to the nearest hundredth
 * Truncates a number to the nearest hundredth
 */
@function truncate($number) {
	@return math.div(math.round($number * 100), 100);
}
/**
 * Creates a responsive font size using clamp()
 */
@function get-responsive-fsz(
	$font-title,
	$min-rem,
	$max-rem,
	$min-viewport: gv.$min-viewport,
	$max-viewport: gv.$max-viewport
) {
	$min-value: map-get($typography-scales, $font-title, #{$min-rem});
	$max-value: map-get($typography-scales, $font-title, #{$max-rem});
	$slope: math.div(($min-value - $max-value), ($max-viewport - $min-viewport));
	$intercept: $min-viewport * $slope + $min-value;

	@return clamp(
		#{$min-value},
		(#{truncate($intercept)} + #{truncate($slope * -100)}vw),
		#{$max-value}
	);
}

/**
 * Gets a static font size from the typography scales
 */
@function get-static-fsz($category, $size) {
	$category-map: map-get($typography-scales, $category);
	@if not $category-map {
		@error "Invalid category '#{$category}'. Valid categories are: body, heading, display.";
	}

	$font-size: map-get($category-map, $size);
	@if not $font-size {
		@error "Invalid size '#{$size}' for '#{$category}'. Valid sizes are: sm, md, lg, xl.";
	}

	@return $font-size;
}

@use 'sass:math';

/* ---------------------------------------------------------------------------
   1) Global / Default Variables (REM Only)
   ---------------------------------------------------------------------------
   Adjust these to match your project's design system. We assume that 1rem
   typically corresponds to 16px, but we're NOT using px at all, so everything
   remains consistent in rem.
--------------------------------------------------------------------------- */
$typography-base-size: 1.125rem; // e.g., ~18px if 1rem=16px
$typography-scale-ratio: 1.414; // Classic typographic ratio (sqrt(2))

/* ---------------------------------------------------------------------------
   2) Typographic Scales (REM Values)
   ---------------------------------------------------------------------------
   We define a few categories ("body", "heading", "display"), each with size
   keys ("sm", "md", "lg", "xl"). All values are in rem, derived from the
   base size and ratio.
--------------------------------------------------------------------------- */
$typography-scales: (
	'body': (
		'sm': math.div($typography-base-size, math.pow($typography-scale-ratio, 0.5)),
		'md': math.div($typography-base-size, math.pow($typography-scale-ratio, 0.75)),
		'lg': $typography-base-size,
		'xl': $typography-base-size * math.pow($typography-scale-ratio, 0.5)
	),
	'heading': (
		'sm': $typography-base-size * math.pow($typography-scale-ratio, 1),
		'md': $typography-base-size * math.pow($typography-scale-ratio, 1.5),
		'lg': $typography-base-size * math.pow($typography-scale-ratio, 2),
		'xl': $typography-base-size * math.pow($typography-scale-ratio, 2.5)
	),
	'display': (
		'sm': $typography-base-size * math.pow($typography-scale-ratio, 3),
		'md': $typography-base-size * math.pow($typography-scale-ratio, 4),
		'lg': $typography-base-size * math.pow($typography-scale-ratio, 5),
		'xl': $typography-base-size * math.pow($typography-scale-ratio, 5.5)
	)
);

/* ---------------------------------------------------------------------------
   3) Static Font-Size Getter
   ---------------------------------------------------------------------------
   Retrieves a static size from $typography-scales, returning a REM value.
--------------------------------------------------------------------------- */
@function get-static-fsz($font-category, $size) {
	$category-map: map-get($typography-scales, $font-category);

	@if not $category-map {
		@error "Invalid category '#{$font-category}'. " +
           "Valid categories are: body, heading, display.";
	}

	$font-size: map-get($category-map, $size);

	@if not $font-size {
		@error "Invalid size '#{$size}' for '#{$font-category}'. " +
           "Valid sizes are: sm, md, lg, xl.";
	}

	@return $font-size;
}

/* ---------------------------------------------------------------------------
   4) Pure Clamp Function (REM-Only)
   ---------------------------------------------------------------------------
   This is a direct Marc Bacon-style function, but restricted to REM units.
   Pass in:
     - $min-size      (rem) e.g. 1rem
     - $max-size      (rem) e.g. 2rem
     - $min-viewport  (rem) e.g. 20rem  ( ~320px if 1rem=16px )
     - $max-viewport  (rem) e.g. 75rem  ( ~1200px if 1rem=16px )

   Returns:
     clamp($min-size, calc($intercept + $slope * 100vw), $max-size)

   Where:
     $slope     = (maxSize - minSize) / (maxVW - minVW)
     $intercept = minSize - slope * minVW
--------------------------------------------------------------------------- */
/*=============================================
=            for clamp             =
=============================================*/
$min-viewport: 20rem; // 320px 20rem
$max-viewport: 90rem; // 1440px
@function clamp-size(
	$min-size,
	$max-size,
	$min-viewport: $min-viewport,
	$max-viewport: $max-viewport
) {
	$slope: math.div($max-size - $min-size, $max-viewport - $min-viewport);
	$intercept: $min-size - ($slope * $min-viewport);

	@return clamp($min-size, calc(#{$intercept} + #{$slope} * 100vw), $max-size);
}

/* ---------------------------------------------------------------------------
   5) Responsive Font-Size (From Scale + Clamp)
   ---------------------------------------------------------------------------
   Blends the typographic scale with the clamp approach:
   1) Fetch the smaller (min) and larger (max) font-sizes from the scale.
   2) Use clamp-size() to create the fluid clamp expression.
   3) Uses default $min-viewport / $max-viewport if not overridden.
--------------------------------------------------------------------------- */
@function get-res-fsz(
	$font-category,
	$min-key,
	$max-key,
	$min-vw: $min-viewport,
	$max-vw: $max-viewport
) {
	$min-size: get-static-fsz($font-category, $min-key);
	$max-size: get-static-fsz($font-category, $max-key);

	@return clamp-size($min-size, $max-size, $min-vw, $max-vw);
}

/* ---------------------------------------------------------------------------
   6) Example Usage
   ---------------------------------------------------------------------------
   - h1: fluidly scales between 'heading' 'sm' and 'heading' 'xl'
         across 20rem to 75rem viewport range.
   - p : fluidly scales between 'body' 'sm' and 'body' 'lg' with the same range.
--------------------------------------------------------------------------- */

// Example 1: Heading that scales between 'sm' (small) and 'xl' (extra-large)
// h1 {
//   font-size: get-res-fsz('heading', 'sm', 'xl');
//   // => clamp(1.59rem, calc(...), 3.18rem)  // Example numbers
// }

// // Example 2: Paragraph that scales between 'sm' and 'lg' for "body"
// p {
//   font-size: get-res-fsz('body', 'sm', 'lg');
//   // => clamp(0.94rem, calc(...), 1.13rem)  // Example numbers
// }

// Example 3: Using clamp-size() directly (no scale map), e.g., from 1rem to 2rem
// across a 30rem to 70rem viewport range:
// .my-class {
//   font-size: clamp-size(1rem, 2rem, 30rem, 70rem);
// }

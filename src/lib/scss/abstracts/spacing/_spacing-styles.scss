@use 'spacing-functions' as spacing-fn;

/*-----------------------------------------------------------------
  Helper mixin to set padding with type options: 'all', 'inline',
  or 'block'. Returns the proper CSS property.
-----------------------------------------------------------------*/
@mixin apply-padding($size, $type, $static: false) {
	$value: spacing-fn._get-spacing-type($size, $static);
	@if $type == 'all' {
		padding: $value;
	} @else if $type == 'inline' {
		padding-inline: $value;
	} @else if $type == 'block' {
		padding-block: $value;
	} @else if $type == 'top' {
		padding-top: $value;
	} @else if $type == 'right' {
		padding-right: $value;
	} @else if $type == 'bottom' {
		padding-bottom: $value;
	} @else {
		@error "Invalid padding type. Use 'all', 'inline', or 'block'.";
	}
}
/*-----------------------------------------------------------------
  Helper mixin for setting gap property
-----------------------------------------------------------------*/
@mixin apply-gap($size, $static: false) {
	gap: spacing-fn._get-spacing-type($size, $static);
}

/*-----------------------------------------------------------------
  Margin mixin with direction options
-----------------------------------------------------------------*/
@mixin apply-margin($size: 'md', $direction: 'all', $static: false) {
	$sp: spacing-fn._get-spacing-type($size, $static);

	@if $direction == 'all' {
		margin: $sp;
	} @else if $direction == 'top' {
		margin-top: $sp;
	} @else if $direction == 'right' {
		margin-right: $sp;
	} @else if $direction == 'bottom' {
		margin-bottom: $sp;
	} @else if $direction == 'left' {
		margin-left: $sp;
	} @else if $direction == 'inline' {
		margin-inline: $sp;
	} @else if $direction == 'block' {
		margin-block: $sp;
	} @else if $direction == 'auto' {
		margin: auto;
	} @else {
		@error "Invalid direction. Use 'all', 'top', 'right', 'bottom', 'left', 'inline', 'block', or 'auto'.";
	}
}

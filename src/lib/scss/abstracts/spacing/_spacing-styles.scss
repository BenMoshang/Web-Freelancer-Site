@use 'spacing-functions' as sf;
@use 'spacing-variables' as sv;
@use '../../base/global-variables' as gv;

//-----------------------------------------------------------------
// Spacing System
//-----------------------------------------------------------------

// Static spacing: fixed values (e.g., 'md' = 16px)
$static-spacing: (
	'xs': sf.get-static-sp('s4'),
	// 4px
	'sm': sf.get-static-sp('s8'),
	// 8px
	'md': sf.get-static-sp('s16'),
	// 16px
	'lg': sf.get-static-sp('s20'),
	// 20px
	'xl': sf.get-static-sp('s24'),
	// 24px
	'2xl': sf.get-static-sp('s32'),
	// 32px
	'3xl': sf.get-static-sp('s48'),
	// 48px
	'4xl': sf.get-static-sp('s64'),
	// 64px
	'5xl': sf.get-static-sp('s80') // 80px
);

// Responsive spacing: scales with viewport (e.g., 'md' = 20px to 24px)
$responsive-spacing: (
	'xs': sf.get-sp('s4', 's8'),
	// 4px to 8px
	'sm': sf.get-sp('s8', 's16'),
	// 8px to 16px
	'md': sf.get-sp('s16', 's20'),
	// 16px to 20px
	'lg': sf.get-sp('s20', 's24'),
	// 20px to 24px
	'xl': sf.get-sp('s24', 's32'),
	// 24px to 32px
	'2xl': sf.get-sp('s32', 's48'),
	// 32px to 48px
	'3xl': sf.get-sp('s48', 's64'),
	// 48px to 64px
	'4xl': sf.get-sp('s64', 's80'),
	// 64px to 80px
	'5xl': sf.get-sp('s80', 's144') // 80px to 144px
);

// Helper function to get spacing value
@function spacing($size, $static: false) {
	$map: if($static, $static-spacing, $responsive-spacing);
	@if map-has-key($map, $size) {
		@return map-get($map, $size);
	}
	@error "Spacing key `#{$size}` not found in #{if($static, '$static-spacing', '$responsive-spacing')}";
}

//-----------------------------------------------------------------
// MARGINS
//-----------------------------------------------------------------
$most-related: spacing('xs', true); // Icons next to text (4px)
$closely-related: spacing('sm', true); // Nav links (8px)
$semi-related: spacing('md', true); // Heading to subheading (16px)
$less-related: spacing('xl', true); // Subheading to paragraph (24px)
$not-related: spacing('2xl', true); // Between paragraphs (32px)

//-----------------------------------------------------------------
// Spacing Mixins - Quick Reference
//-----------------------------------------------------------------
// Available sizes: 2xs, xs, sm, md, lg, xl, 2xl, 3xl, 4xl, 5xl
// Usage: @include [mixin-name](size, type?, static?);
//
// Examples:
// @include page-padding('xl');                    // All sides, responsive
// @include section-padding('lg', 'inline', true); // Left/right, static
// @include component-gap('md', true);             // Static gap

// Page-level spacing
@mixin page-padding($size: 'xl', $type: 'all', $static: false) {
	@if $type == 'all' {
		padding: spacing($size, $static);
	} @else if $type == 'inline' {
		padding-inline: spacing($size, $static);
	} @else if $type == 'block' {
		padding-block: spacing($size, $static);
	} @else {
		@error "Invalid type. Use: 'all', 'inline', or 'block'";
	}
}

@mixin page-gap($size: 'xl', $static: false) {
	gap: spacing($size, $static);
}

// Section-level spacing
@mixin section-padding($size: 'xl', $type: 'all', $static: false) {
	@if $type == 'all' {
		padding: spacing($size, $static);
	} @else if $type == 'inline' {
		padding-inline: spacing($size, $static);
	} @else if $type == 'block' {
		padding-block: spacing($size, $static);
	} @else {
		@error "Invalid type. Use: 'all', 'inline', or 'block'";
	}
}

@mixin section-gap($size: '4xl', $static: false) {
	gap: spacing($size, $static);
}

// Component-level spacing
@mixin component-padding($size: 'md', $type: 'all', $static: false) {
	@if $type == 'all' {
		padding: spacing($size, $static);
	} @else if $type == 'inline' {
		padding-inline: spacing($size, $static);
	} @else if $type == 'block' {
		padding-block: spacing($size, $static);
	} @else {
		@error "Invalid type. Use: 'all', 'inline', or 'block'";
	}
}

@mixin component-gap($size: 'md', $static: false) {
	gap: spacing($size, $static);
}

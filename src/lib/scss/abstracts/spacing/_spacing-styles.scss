@use 'spacing-functions' as sf;
@use 'spacing-variables' as sv;
@use '../../base/global-variables' as gv;
$static-spacing: (
	'xs': sf.get-static-sp('s4'),
	// 4px
	'sm': sf.get-static-sp('s8'),
	// 8px
	'md': sf.get-static-sp('s16'),
	// 16px
	'lg': sf.get-static-sp('s24'),
	// 24px
	'xl': sf.get-static-sp('s32'),
	// 32px
	'2xl': sf.get-static-sp('s48'),
	// 48px
	'3xl': sf.get-static-sp('s64'),
	// 64px
	'4xl': sf.get-static-sp('s80') // 80px
);
$responsive-spacing: (
	'xs': sf.get-sp('s4', 's8'),
	// 4px to 8px
	'sm': sf.get-sp('s8', 's16'),
	// 8px to 16px
	'md': sf.get-sp('s16', 's24'),
	// 16px to 24px
	'lg': sf.get-sp('s24', 's32'),
	// 16px to 32px
	'xl': sf.get-sp('s32', 's48'),
	// 24px to 48px
	'2xl': sf.get-sp('s48', 's64'),
	// 32px to 64px
	'3xl': sf.get-sp('s64', 's80'),
	// 40px to 80px
	'4xl': sf.get-sp('s80', 's144') // 48px to 96px
);
//todo: get word spacing
@function get-sp-range($key) {
	@if map-has-key($responsive-spacing, $key) {
		@return map-get($responsive-spacing, $key);
	} @else {
		@error "Key '#{$key}' not found in $responsive-spacing map";
		@return null;
	}
}

//i use these for (static) margin spacing
$most-related: sf.get-static-sp('s4'); //4px *eg. icons next to text
$closely-related: sf.get-static-sp('s8'); //8px *eg. space between nav links
$semi-related: sf.get-static-sp('s16'); //12px *eg. heading to subheading
$less-related: sf.get-static-sp('s24'); //24px *eg. subheading to paragraph
$not-related: sf.get-static-sp('s32'); //32px *eg. space between paragraphs
// Directional padding mixins for more granular control
@mixin padding-inline($size: 'md', $static: false) {
	$spacing-map: if($static, $static-spacing, $responsive-spacing);
	padding-inline: map-get($spacing-map, $size);
}

@mixin padding-block($size: 'md', $static: false) {
	$spacing-map: if($static, $static-spacing, $responsive-spacing);
	padding-block: map-get($spacing-map, $size);
}
/*=============================================
=           section       =
=============================================*/
// Section-level padding (for major layout sections)
@mixin section-padding($size: 'xl') {
	padding: map-get($responsive-spacing, $size);
}
// Section-level padding with separate inline and block control
@mixin section-padding-inline($size: 'lg') {
	padding-inline: map-get($responsive-spacing, $size);
}

@mixin section-padding-block($size: '2xl') {
	padding-block: map-get($responsive-spacing, $size);
}

@mixin section-gap($size: '4xl') {
	gap: map-get($responsive-spacing, $size);
}

/*=============================================
=           inner-section       =
=============================================*/
@mixin inner-section-gap($size: 'xl') {
	gap: map-get($responsive-spacing, $size);
}
// Inner section padding (for nested sections/containers)
@mixin inner-section-padding($size: 'xl') {
	padding: map-get($responsive-spacing, $size);
}

/*=============================================
=           component       =
=============================================*/
@mixin component-gap($size: 'md') {
	gap: map-get($responsive-spacing, $size);
}

/**
* @param: $size: 'lg' | 'md' 
* @description: Use this for components that need a static gap
*/
@mixin component-static-gap($size: 'md') {
	$size: if($size == 'lg', 'lg', 'md');
	gap: map-get($static-spacing, $size);
}

/**
* @param: $size: 'lg' | 'md' 
* @description: Use this for components that need a static padding
*/
@mixin component-static-padding($size: 'md') {
	$size: if($size == 'lg', 'lg', 'md');
	padding: map-get($static-spacing, $size);
}

// Component-level padding (for UI components)
@mixin component-padding($size: 'md') {
	padding: map-get($responsive-spacing, $size);
}

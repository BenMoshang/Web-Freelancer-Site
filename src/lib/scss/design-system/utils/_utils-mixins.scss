// Utils/_mixins.scss
// Common utility mixins for layout, typography, and more

@use '../tokens/alias/_alias-typography' as typography;
@use '../tokens/alias/_alias-spacing' as spacing;
@use '../base/_global-variables' as gv;
@use 'sass:map';

// Flexbox mixins
@mixin flex-row {
	display: flex;
	flex-direction: row;
}

@mixin flex-column {
	display: flex;
	flex-direction: column;
}

@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin flex-between {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

@mixin flex-start {
	display: flex;
	align-items: center;
	justify-content: flex-start;
}

@mixin flex-end {
	display: flex;
	align-items: center;
	justify-content: flex-end;
}

// Apply spacing to elements (padding)
@mixin apply-spacing($property, $direction, $size, $min-size-modifier: 0.5, $is-responsive: true) {
	$spacing-value: map.get(spacing.$padding, $size);

	@if $direction == 'all' {
		#{$property}: $spacing-value;
	} @else if $direction == 'block' {
		#{$property}-block: $spacing-value;
	} @else if $direction == 'inline' {
		#{$property}-inline: $spacing-value;
	} @else if $direction == 'block-start' or $direction == 'top' {
		#{$property}-block-start: $spacing-value;
	} @else if $direction == 'block-end' or $direction == 'bottom' {
		#{$property}-block-end: $spacing-value;
	} @else if $direction == 'inline-start' or $direction == 'left' {
		#{$property}-inline-start: $spacing-value;
	} @else if $direction == 'inline-end' or $direction == 'right' {
		#{$property}-inline-end: $spacing-value;
	}
}

// Padding utility mixin
@mixin apply-padding($direction: 'all', $size: 'md', $is_responsive: true) {
	@include apply-spacing('padding', $direction, $size, 0.5, $is_responsive);
}

// Grid layout mixins
@mixin grid-columns($columns: 1, $gap: map.get(spacing.$gap, 'md')) {
	display: grid;
	grid-template-columns: repeat($columns, 1fr);
	gap: $gap;
}

// Typography mixins
@mixin heading($level: 1) {
	@if $level == 1 {
		font-size: map.get(typography.$font-size, 'heading', 'h1');
	} @else if $level == 2 {
		font-size: map.get(typography.$font-size, 'heading', 'h2');
	} @else if $level == 3 {
		font-size: map.get(typography.$font-size, 'heading', 'h3');
	} @else {
		@error "Invalid heading level: #{$level}. Must be 1, 2, or 3.";
	}
	font-weight: map.get(typography.$font-weight, 'bold');
	line-height: map.get(typography.$line-height, 'tight');
}

@mixin heading-1 {
	@include heading(1);
}

@mixin heading-2 {
	@include heading(2);
}

@mixin heading-3 {
	@include heading(3);
}

@mixin body-text($size: 'medium') {
	@if $size == 'small' {
		font-size: map.get(typography.$font-size, 'body', 'sm');
	} @else {
		font-size: map.get(typography.$font-size, 'body', 'md');
	}
	font-weight: map.get(typography.$font-weight, 'regular');
	line-height: map.get(typography.$line-height, 'normal');
}

@mixin body-text-small {
	@include body-text('small');
}

// Truncate text with ellipsis
@mixin truncate {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

// Limit text to specified number of lines with ellipsis
@mixin line-clamp($lines: 2) {
	display: -webkit-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

// Focus styles
@mixin focus-ring($color: null, $offset: 2px, $width: 2px) {
	$ring-color: $color;
	@if $color == null {
		// Using a default blue color since typography.$accent might not exist
		$ring-color: #3b82f6;
	}
	outline: $width solid $ring-color;
	outline-offset: $offset;
}

// Layout mixins
@mixin apply-page-max-inline {
	max-inline-size: gv.$PAGE_MAX_INLINE;
	margin-inline: auto;
}

@mixin apply-br($size: 'md') {
	border-radius: map.get(typography.$border-radius, $size);
}

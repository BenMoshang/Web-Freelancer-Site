/**
 * Responsive Spacing
 * --------------------------------------------------
 * Provides spacing utilities that automatically adjust based on viewport size
 * using fluid value calculations (CSS clamp).
 * 
 * This module leverages the create-clamp utility function to create spacing 
 * that scales smoothly between viewport boundaries.
 */

@use 'sass:map';
// Import utility functions for responsive calculations
@use '../utils/_utils-functions' as utils;
@use '../base/_global-variables' as gv;

// Import spacing token values
@use '../tokens/_primitive-spacing' as tokens;

// Direction mapping for logical properties
$directions: (
	'all': '',
	'block': 'block',
	'inline': 'inline',
	'block-start': 'block-start',
	'block-end': 'block-end',
	'inline-start': 'inline-start',
	'inline-end': 'inline-end'
);

/**
 * Get spacing value based on t-shirt size
 * 
 * @param {String} $size - T-shirt size (xs, sm, md, lg, xl, etc.)
 * @return {Number} The corresponding spacing value
 */
@function get-space-value($size) {
	@if not map-has-key(tokens.$spacing-t-shirt, $size) {
		@error "Size '#{$size}' not found in spacing t-shirt sizes.";
	}
	@return map-get(tokens.$spacing-t-shirt, $size);
}

/**
 * Calculate spacing value based on responsive preference
 * 
 * @param {String} $size - T-shirt size for spacing value
 * @param {Number} $min-size-modifier - Modifier for minimum size (0-1) that determines how much the spacing shrinks at smaller viewports.
 *                                     A value of 0.5 means the spacing will be 50% of the base size at the minimum viewport width.
 *                                     Higher values (closer to 1) result in less reduction of spacing on small screens.
 * @param {Boolean} $is-responsive - Whether to use fluid (responsive) or static spacing
 * @param {Number} $min-viewport - Minimum viewport width (default: 20rem/320px)
 * @param {Number} $max-viewport - Maximum viewport width (default: page max width)
 * @return {String|Number} CSS clamp value for fluid spacing or static value
 */
@function calculate-spacing(
	$size: 'md',
	$min-size-modifier: 0.5,
	$is-responsive: true,
	$min-viewport: 20rem,
	$max-viewport: gv.$PAGE_MAX_INLINE
) {
	$base-value: get-space-value($size);

	@if $is-responsive {
		$min-value: $base-value * $min-size-modifier;
		@return utils.create-clamp($min-value, $base-value, $min-viewport, $max-viewport);
	} @else {
		@return $base-value;
	}
}

/**
 * Determine the full property name based on base property and direction
 * 
 * @param {String} $base-property - Base CSS property (padding, margin, etc.)
 * @param {String} $direction - Direction to apply spacing to (all, block, inline, etc.)
 * @return {String} The full CSS property name
 */
@function get-property-with-direction($base-property, $direction) {
	@if not map-has-key($directions, $direction) {
		@error "Direction '#{$direction}' is not valid. Valid directions are: #{map-keys($directions)}.";
	}

	$direction-suffix: map-get($directions, $direction);
	@if $direction == 'all' {
		@return $base-property;
	} @else {
		@return '#{$base-property}-#{$direction-suffix}';
	}
}

/**
 * Base mixin to apply spacing to any CSS property with direction
 * 
 * @param {String} $base-property - Base CSS property (padding, margin, etc.)
 * @param {String} $direction - Direction to apply spacing to (all, block, inline, etc.)
 * @param {String} $size - T-shirt size for spacing value
 * @param {Number} $min-size-modifier - Modifier for minimum size (0-1)
 * @param {Boolean} $is-responsive - Whether to use fluid (responsive) or static spacing
 * @param {Number} $min-viewport - Minimum viewport width (default: 20rem)
 * @param {Number} $max-viewport - Maximum viewport width (default: page max width)
 */
@mixin apply-spacing(
	$base-property,
	$direction: 'all',
	$size: 'md',
	$min-size-modifier: 0.5,
	$is-responsive: true,
	$min-viewport: 20rem,
	$max-viewport: gv.$PAGE_MAX_INLINE
) {
	$property: get-property-with-direction($base-property, $direction);
	#{$property}: calculate-spacing(
		$size,
		$min-size-modifier,
		$is-responsive,
		$min-viewport,
		$max-viewport
	);
}

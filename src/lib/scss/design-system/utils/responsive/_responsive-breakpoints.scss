// Responsive/_responsive-breakpoints.scss
// Renamed from _breakpoints.scss

@use 'sass:map';
@use '../base/global-variables' as gv;

// Breakpoint map with common screen sizes
$breakpoints: (
	'min': 20rem,
	// 320px
	'mobile': 29.6875rem,
	// 576px
	'tablet': 48rem,
	// 768px
	'desktop': 64rem,
	// 1024px start of  desktop
	'large-desktop': 80rem,
	// 1440px
	'max': 90rem
);

// Function to get breakpoint value
@function get-breakpoint($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@return map.get($breakpoints, $breakpoint);
	} @else {
		@error "Breakpoint '#{$breakpoint}' not found in $breakpoints map.";
		@return null;
	}
}

// Media query mixins
@mixin respond-to($breakpoint, $desktop-first: false) {
	$min-width: get-breakpoint($breakpoint);
	@if $desktop-first {
		@media (min-width: $min-width) {
			@content;
		}
	} @else {
		@media (max-width: ($min-width - 0.0625rem)) {
			@content;
		}
	}
}

// Container width mixins
@mixin container {
	inline-size: 100%;
	margin-inline: auto;
	padding-inline: var(--container-padding, 1rem);
	max-inline-size: gv.$PAGE_MAX_INLINE;
}

@mixin container-fluid {
	inline-size: 100%;
	margin-inline: auto;
	padding-inline: var(--container-padding, 1rem);
}

// Export breakpoint values as CSS variables
@mixin export-breakpoints-as-css-vars {
	:root {
		@each $name, $value in $breakpoints {
			--breakpoint-#{$name}: #{$value};
		}
	}
}

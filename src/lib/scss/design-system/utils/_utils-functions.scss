/**
 * Utility Functions
 * --------------------------------------------------
 * This module provides helper functions for common tasks in the design system.
 * 
 * Categories of functions:
 * - Color manipulation: Safely work with colors and opacity
 * - Mathematical helpers: Convert units, calculate responsive values
 * - Map utilities: Safely retrieve values from nested maps
 * - Layout helpers: Calculate spacing, aspect ratios
 * 
 * @example
 * @use '../utils/utils-functions' as utils;
 * 
 * .element {
 *   padding: utils.px-to-rem(16);
 *   color: utils.color-with-opacity($primary, 0.8);
 * }
 */

@use '../tokens/alias/themes/themes' as themes;
@use '../tokens/alias/_alias-typography' as typography;
@use 'sass:map';
@use 'sass:math';
@use '../base/global-variables' as gv;

/**
 * COLOR MANIPULATION FUNCTIONS
 * --------------------------------------------------
 */

/**
 * Safely get a color from a map
 * 
 * @param {Map} $map - The map containing color values
 * @param {String} $key - The key to look up in the map
 * @param {Color} $fallback - Optional fallback color if key not found
 * @return {Color} The requested color or fallback (or error)
 * 
 * @example
 * color: get-color($primary, 'default', #0066cc);
 */
@function get-color($map, $key, $fallback: null) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	}
	@if $fallback {
		@return $fallback;
	}
	@error "Color '#{$key}' not found in map.";
}

/**
 * Create an rgba color with opacity
 * 
 * @param {Color} $color - Base color to apply opacity to
 * @param {Number} $opacity - Opacity value (0-1)
 * @return {Color} RGBA color with specified opacity
 * 
 * @example
 * background-color: color-with-opacity($primary-color, 0.5);
 */
@function color-with-opacity($color, $opacity: 1) {
	@return rgba($color, $opacity);
}

/**
 * MATHEMATICAL HELPER FUNCTIONS
 * --------------------------------------------------
 */

/**
 * Safely convert pixels to rem units
 * 
 * @param {Number} $px - Pixel value to convert (with or without units)
 * @param {Number} $base-font-size - Base font size for calculation (default: 16px)
 * @return {Number} Equivalent value in rem units
 * 
 * @example
 * font-size: px-to-rem(24);  // Outputs: 1.5rem (assuming 16px base)
 */
@function px-to-rem($px, $base-font-size: 16px) {
	$px: if(unitless($px), $px * 1px, $px);
	$base-font-size: if(unitless($base-font-size), $base-font-size * 1px, $base-font-size);
	@return ($px / $base-font-size) * 1rem;
}

/**
 * Calculate a responsive value using CSS clamp()
 * 
 * @param {Number} $min-value - Minimum value (usually for mobile)
 * @param {Number} $max-value - Maximum value (usually for desktop)
 * @param {Number} $min-width - Viewport width for minimum value (default: 320px)
 * @param {Number} $max-width - Viewport width for maximum value (default: 1200px)
 * @return {String} CSS clamp() function with calculated values
 * 
 * @example
 * font-size: create-clamp(1rem, 2rem, 320px, 1200px);
 */
@function create-clamp($min-value, $max-value, $min-width: 20rem, $max-width: gv.$PAGE_MAX_INLINE) {
	$slope: ($max-value - $min-value) / ($max-width - $min-width);
	$y-axis-intersection: -1 * $min-width * $slope + $min-value;

	@return clamp(#{$min-value}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$max-value});
}

/**
 * MAP UTILITY FUNCTIONS
 * --------------------------------------------------
 */

/**
 * Safely get a nested value from a map
 * 
 * @param {Map} $map - The map to search in
 * @param {List} $keys - List of keys to traverse the map
 * @return {*} Value found at the specified path or null with error
 * 
 * @example
 * $value: map-deep-get($theme, 'colors', 'primary', 'default');
 */
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		@if not map-has-key($map, $key) {
			@error "Map has no key '#{$key}'";
			@return null;
		}
		$map: map-get($map, $key);
	}
	@return $map;
}

/**
 * LAYOUT HELPER FUNCTIONS
 * --------------------------------------------------
 */

/**
 * Calculate spacing for consistent vertical rhythm
 * 
 * @param {Number} $lines - Number of line heights to use
 * @param {Number} $line-height - Line height value (default: from typography tokens)
 * @param {Number} $font-size - Font size value (default: from typography tokens)
 * @return {Number} Calculated spacing value
 * 
 * @example
 * margin-bottom: vertical-rhythm(2);  // Outputs 2 × line-height × font-size
 */
@function vertical-rhythm($lines: 1, $line-height: null, $font-size: null) {
	$lh: $line-height;
	$fs: $font-size;

	@if $line-height == null {
		$lh: map.get(typography.$line-height, 'normal');
	}

	@if $font-size == null {
		$fs: map.get(typography.$font-size, 'body', 'md');
	}

	@return $lines * $lh * $fs;
}

/**
 * Calculate percentage for aspect ratio
 * 
 * @param {Number} $width - Width value for ratio
 * @param {Number} $height - Height value for ratio
 * @return {Percentage} Height as percentage of width
 * 
 * @example
 * padding-bottom: aspect-ratio(16, 9);  // Creates 16:9 aspect ratio
 */
@function aspect-ratio($width, $height) {
	@return percentage($height / $width);
}

/**
 * PERFORMANCE OPTIMIZATION
 * --------------------------------------------------
 */

/**
 * Cache of validated tokens to improve performance
 * Prevents re-validation of the same token lookups
 * Using module-level variable with immutable updates pattern
 */
$_token_cache: () !default;
$_cache_enabled: true !default;

/**
 * Enable or disable token caching
 * @param {Boolean} $enabled - Whether caching should be enabled
 */
@function set-cache-enabled($enabled: true) {
	$_cache_enabled: $enabled !global;
	@return $enabled;
}

/**
 * Clear the token cache
 * Useful in test environments or when dynamically updating tokens
 */
@function clear-token-cache() {
	$_token_cache: () !global;
	@return true;
}

/**
 * Validate and cache token lookup for better performance
 * 
 * @param {Map} $map - The map to validate against
 * @param {String} $key - The key to validate
 * @param {String} $map-name - Name of the map for error messages
 * @return {*} Value found at key
 * 
 * @example
 * $color: validate-token($colors, 'primary', 'colors');
 */
@function validate-token($map, $key, $map-name) {
	// Create a unique cache key
	$cache-key: $map-name + '-' + $key;

	// Check if caching is enabled
	@if $_cache_enabled {
		// Check if already validated
		@if map-has-key($_token_cache, $cache-key) {
			@return map-get($_token_cache, $cache-key);
		}
	}

	// Validate and cache
	@if not map-has-key($map, $key) {
		// Check for close matches for typo detection
		$available-keys: map-keys($map);
		$similar-keys: ();

		@each $available-key in $available-keys {
			// Simple similarity check based on first character
			@if str-slice($available-key, 1, 1) == str-slice($key, 1, 1) {
				$similar-keys: append($similar-keys, $available-key);
			}
		}

		@if length($similar-keys) > 0 {
			@warn "Key '#{$key}' not found in #{$map-name} map. Did you mean one of these? #{$similar-keys}";
		}

		@error "Key '#{$key}' not found in #{$map-name} map.";
	}

	$value: map-get($map, $key);

	// Only update cache if caching is enabled
	@if $_cache_enabled {
		$_token_cache: map-merge(
			$_token_cache,
			(
				$cache-key: $value
			)
		) !global;
	}

	@return $value;
}

/**
 * DEPRECATION WARNINGS
 * --------------------------------------------------
 */

/**
 * Log deprecation warning for functions or mixins
 * @param {String} $old - Name of deprecated feature
 * @param {String} $new - Name of replacement feature
 * @param {String} $version - Version when it will be removed (optional)
 */
@mixin deprecated($old, $new, $version: null) {
	$message: '#{$old} is deprecated.';

	@if $new {
		$message: $message + ' Use #{$new} instead.';
	}

	@if $version {
		$message: $message + ' Will be removed in version #{$version}.';
	}

	@warn $message;
}

// Deprecated color function - use theme() instead
@function get-color-deprecated($map, $key, $fallback: null) {
	@include deprecated('get-color', 'theme()');
	@return get-color($map, $key, $fallback);
}

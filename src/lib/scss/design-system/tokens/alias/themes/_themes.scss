// Themes/_themes.scss
// Define theme-based variables for light and dark modes

@use '../../../_primitive-colors' as colors;
@use 'sass:map';

/**
 * Light theme color palette
 * Maps semantic color categories to specific color values
 */
$light-theme: (
	'background': (
		'primary': colors.$color-white,
		'secondary': map.get(colors.$color-gray, 50),
		'tertiary': map.get(colors.$color-gray, 100)
	),
	'text': (
		'primary': map.get(colors.$color-gray, 900),
		'secondary': map.get(colors.$color-gray, 700),
		'tertiary': map.get(colors.$color-gray, 600),
		'disabled': map.get(colors.$color-gray, 400)
	),
	'border': (
		'default': map.get(colors.$color-gray, 200),
		'focus': map.get(colors.$color-blue, 500),
		'hover': map.get(colors.$color-gray, 300)
	),
	'accent': (
		'primary': map.get(colors.$color-blue, 500),
		'secondary': map.get(colors.$color-blue, 600),
		'tertiary': map.get(colors.$color-blue, 700)
	),
	'status': (
		'success': map.get(colors.$color-green, 500),
		'warning': map.get(colors.$color-yellow, 500),
		'error': map.get(colors.$color-red, 500),
		'info': map.get(colors.$color-blue, 500)
	)
);

/**
 * Dark theme color palette
 * Maps semantic color categories to specific color values optimized for dark mode
 */
$dark-theme: (
	'background': (
		'primary': map.get(colors.$color-gray, 950),
		'secondary': map.get(colors.$color-gray, 900),
		'tertiary': map.get(colors.$color-gray, 800)
	),
	'text': (
		'primary': colors.$color-white,
		'secondary': map.get(colors.$color-gray, 300),
		'tertiary': map.get(colors.$color-gray, 400),
		'disabled': map.get(colors.$color-gray, 600)
	),
	'border': (
		'default': map.get(colors.$color-gray, 700),
		'focus': map.get(colors.$color-blue, 400),
		'hover': map.get(colors.$color-gray, 600)
	),
	'accent': (
		'primary': map.get(colors.$color-blue, 400),
		'secondary': map.get(colors.$color-blue, 300),
		'tertiary': map.get(colors.$color-blue, 200)
	),
	'status': (
		'success': map.get(colors.$color-green, 400),
		'warning': map.get(colors.$color-yellow, 400),
		'error': map.get(colors.$color-red, 400),
		'info': map.get(colors.$color-blue, 400)
	)
);

/**
 * Default theme setting
 * Can be overridden when imported
 */
$current-theme: $dark-theme !default;

/**
 * Function to retrieve theme values from CSS custom properties
 * @param {String} $category - The category of the theme value (e.g., 'background', 'text')
 * @param {String} $key - The specific key within the category (e.g., 'primary', 'secondary')
 * @return {String} CSS custom property reference
 */
@function get-theme-value($category, $key) {
	@return var(--theme-#{$category}-#{$key});
}

/**
 * Mixin to apply theme-specific styles
 * Handles both user preference (prefers-color-scheme) and explicit theme selection
 * @param {String} $theme-name - The theme to apply ('light', 'dark', or custom theme name)
 * @content Styles to apply within the theme context
 */
@mixin apply-theme($theme-name) {
	@if $theme-name == 'light' {
		@media (prefers-color-scheme: light) {
			:root:not([data-theme='dark']) & {
				@content;
			}
		}
		[data-theme='light'] & {
			@content;
		}
	} @else if $theme-name == 'dark' {
		@media (prefers-color-scheme: dark) {
			:root:not([data-theme='light']) & {
				@content;
			}
		}
		[data-theme='dark'] & {
			@content;
		}
	} @else {
		[data-theme='#{$theme-name}'] & {
			@content;
		}
	}
}

/**
 * Mixin to export theme variables as CSS custom properties
 * Makes theme values available throughout the application
 * @example
 * @include export-theme-variables();
 */
@mixin export-theme-variables() {
	:root {
		// Set light theme as default
		@each $category, $values in $light-theme {
			@each $key, $value in $values {
				--theme-#{$category}-#{$key}: #{$value};
			}
		}
	}

	// Dark theme variables
	@include apply-theme('dark') {
		@each $category, $values in $dark-theme {
			@each $key, $value in $values {
				--theme-#{$category}-#{$key}: #{$value};
			}
		}
	}
}

/**
 * Mixin for applying adaptive colors using CSS variables
 * @param {String} $property - CSS property to set (default: color)
 * @param {String} $category - Theme category (e.g., 'background', 'text')
 * @param {String} $key - Specific key within the category (e.g., 'primary')
 */
@mixin apply-adaptive-color($property: color, $category, $key) {
	#{$property}: var(--theme-#{$category}-#{$key});
}

/**
 * Alternative adaptive color mixin with direct values
 * Useful when you need to specify exact values rather than theme tokens
 * @param {String} $property - CSS property to set
 * @param {*} $light-value - Value to use in light theme
 * @param {*} $dark-value - Value to use in dark theme
 */
@mixin apply-adaptive-value($property, $light-value, $dark-value) {
	#{$property}: $light-value;

	@include apply-theme('dark') {
		#{$property}: $dark-value;
	}
}

/**
 * High contrast theme mixin for accessibility
 * Applies styles only when high-contrast theme is active
 * @content Styles to apply in high contrast mode
 */
@mixin high-contrast-theme {
	[data-theme='high-contrast'] & {
		@content;
	}
}

/**
 * Alias Colors
 * --------------------------------------------------
 * This module defines semantic color aliases that map to primitive color tokens.
 * 
 * Semantic colors represent the meaning or purpose of a color rather than its visual value.
 * This abstraction allows us to:
 * - Change the underlying colors without changing component code
 * - Ensure consistency in color usage across the application
 * - Make theming more straightforward
 * 
 * Each color map provides different intensity levels from 'lightest' to 'darkest',
 * with 'default' as the primary value.
 * 
 * @example Usage in components
 * @use 'path/to/design-system/tokens/alias/colors' as colors;
 * 
 * .button--primary {
 *   background-color: map.get(colors.$primary, 'default');
 *   color: map.get(colors.$neutral, 'lightest');
 * }
 */

// Alias/_colors.scss
// Define role-based color variables

// Import tokens
@use '../../_primitive-colors' as colors;
@use 'sass:map';

/**
 * Primary color palette
 * Used for primary UI elements, main actions, and brand colors
 */
$primary: (
	'darkest': map.get(colors.$color-blue, 900),
	'darker': map.get(colors.$color-blue, 800),
	'dark': map.get(colors.$color-blue, 700),
	'default': map.get(colors.$color-blue, 500),
	'light': map.get(colors.$color-blue, 300),
	'lighter': map.get(colors.$color-blue, 200),
	'lightest': map.get(colors.$color-blue, 100)
);

/**
 * Secondary color palette
 * Used for secondary UI elements, secondary actions, and complementary brand colors
 */
$secondary: (
	'darkest': map.get(colors.$color-green, 900),
	'darker': map.get(colors.$color-green, 800),
	'dark': map.get(colors.$color-green, 700),
	'default': map.get(colors.$color-green, 500),
	'light': map.get(colors.$color-green, 300),
	'lighter': map.get(colors.$color-green, 200),
	'lightest': map.get(colors.$color-green, 100)
);

/**
 * Error color palette
 * Used for error states, validation messages, and destructive actions
 */
$error: (
	'darkest': map.get(colors.$color-red, 900),
	'darker': map.get(colors.$color-red, 800),
	'dark': map.get(colors.$color-red, 700),
	'default': map.get(colors.$color-red, 500),
	'light': map.get(colors.$color-red, 300),
	'lighter': map.get(colors.$color-red, 200),
	'lightest': map.get(colors.$color-red, 100)
);

/**
 * Success color palette
 * Used for success states, validation messages, and confirmations
 */
$success: (
	'darkest': map.get(colors.$color-green, 900),
	'darker': map.get(colors.$color-green, 800),
	'dark': map.get(colors.$color-green, 700),
	'default': map.get(colors.$color-green, 500),
	'light': map.get(colors.$color-green, 300),
	'lighter': map.get(colors.$color-green, 200),
	'lightest': map.get(colors.$color-green, 100)
);

/**
 * Warning color palette
 * Used for warning states, cautionary messages, and non-critical alerts
 */
$warning: (
	'darkest': map.get(colors.$color-yellow, 900),
	'darker': map.get(colors.$color-yellow, 800),
	'dark': map.get(colors.$color-yellow, 700),
	'default': map.get(colors.$color-yellow, 500),
	'light': map.get(colors.$color-yellow, 300),
	'lighter': map.get(colors.$color-yellow, 200),
	'lightest': map.get(colors.$color-yellow, 100)
);

/**
 * Information color palette
 * Used for informational states, neutral messages, and educational content
 */
$information: (
	'darkest': map.get(colors.$color-blue, 900),
	'darker': map.get(colors.$color-blue, 800),
	'dark': map.get(colors.$color-blue, 700),
	'default': map.get(colors.$color-blue, 500),
	'light': map.get(colors.$color-blue, 300),
	'lighter': map.get(colors.$color-blue, 200),
	'lightest': map.get(colors.$color-blue, 100)
);

/**
 * Neutral color palette
 * Used for UI containers, backgrounds, and non-emphasized content
 */
$neutral: (
	'darkest': map.get(colors.$color-gray, 900),
	'darker': map.get(colors.$color-gray, 800),
	'dark': map.get(colors.$color-gray, 700),
	'default': map.get(colors.$color-gray, 500),
	'light': map.get(colors.$color-gray, 300),
	'lighter': map.get(colors.$color-gray, 200),
	'lightest': map.get(colors.$color-gray, 100)
);

/**
 * Highlight color palette
 * Used for highlighted UI elements, selected states, and focus indicators
 */
$highlight: (
	'darkest': map.get(colors.$color-blue, 900),
	'darker': map.get(colors.$color-blue, 800),
	'dark': map.get(colors.$color-blue, 700),
	'default': map.get(colors.$color-blue, 400),
	'light': map.get(colors.$color-blue, 300),
	'lighter': map.get(colors.$color-blue, 200),
	'lightest': map.get(colors.$color-blue, 100)
);

/**
 * Feedback color palette
 * Used for feedback mechanisms, progress indicators, and status updates
 */
$feedback: (
	'darkest': map.get(colors.$color-gray, 900),
	'darker': map.get(colors.$color-gray, 800),
	'dark': map.get(colors.$color-gray, 700),
	'default': map.get(colors.$color-gray, 500),
	'light': map.get(colors.$color-gray, 300),
	'lighter': map.get(colors.$color-gray, 200),
	'lightest': map.get(colors.$color-gray, 100)
);

/**
 * Action color palette
 * Used for interactive elements, buttons, links, and call-to-actions
 */
$action: (
	'darkest': map.get(colors.$color-blue, 900),
	'darker': map.get(colors.$color-blue, 800),
	'dark': map.get(colors.$color-blue, 700),
	'default': map.get(colors.$color-blue, 600),
	'light': map.get(colors.$color-blue, 400),
	'lighter': map.get(colors.$color-blue, 300),
	'lightest': map.get(colors.$color-blue, 200)
);

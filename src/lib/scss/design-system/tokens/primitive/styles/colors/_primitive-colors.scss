/**
 * Primitive Colors
 * --------------------------------------------------
 * This module defines the base color tokens that serve as the foundation
 * for our design system. These are the raw color values organized by hue 
 * with consistent numeric scales (50, 100, 200, 300...950) in HSLA format.
 * 
 * @example Usage in components
 * @use 'path/to/design-system/tokens/primitive-colors' as primitive;
 * 
 * // With helper function
 * .element {
 *   color: get-color-token('blue', 500);
 *   background-color: get-color-token('gray', 100);
 * }
 */

@use 'sass:map';

// ==========================================================================
// COLOR CONFIGURATION
// ==========================================================================

/**
 * Configuration for the color system
 */
$_CONFIG: (
	'shade-scale': (
		50,
		100,
		200,
		300,
		400,
		500,
		600,
		700,
		800,
		900,
		950
	),
	'default-shade': 500
) !default;

// ==========================================================================
// COLOR TOKENS
// ==========================================================================

/**
 * Raw color values for the design system
 * Organized by hue with consistent numeric scales
 */

// Color palette with HSLA values
// ----------------------------------
$COLORS: (
	'blue': (
		50: hsla(214, 100%, 95%, 1),
		100: hsla(214, 100%, 90%, 1),
		200: hsla(214, 100%, 80%, 1),
		300: hsla(214, 100%, 70%, 1),
		400: hsla(214, 100%, 60%, 1),
		500: hsla(214, 100%, 50%, 1),
		600: hsla(214, 100%, 40%, 1),
		700: hsla(214, 100%, 30%, 1),
		800: hsla(214, 100%, 20%, 1),
		900: hsla(214, 100%, 10%, 1),
		950: hsla(214, 100%, 5%, 1)
	),

	'green': (
		50: hsla(120, 60%, 95%, 1),
		100: hsla(120, 60%, 90%, 1),
		200: hsla(120, 60%, 80%, 1),
		300: hsla(120, 60%, 70%, 1),
		400: hsla(120, 60%, 60%, 1),
		500: hsla(120, 60%, 50%, 1),
		600: hsla(120, 60%, 40%, 1),
		700: hsla(120, 60%, 30%, 1),
		800: hsla(120, 60%, 20%, 1),
		900: hsla(120, 60%, 10%, 1),
		950: hsla(120, 60%, 5%, 1)
	),

	'red': (
		50: hsla(0, 100%, 95%, 1),
		100: hsla(0, 100%, 90%, 1),
		200: hsla(0, 100%, 80%, 1),
		300: hsla(0, 100%, 70%, 1),
		400: hsla(0, 100%, 60%, 1),
		500: hsla(0, 100%, 50%, 1),
		600: hsla(0, 100%, 40%, 1),
		700: hsla(0, 100%, 30%, 1),
		800: hsla(0, 100%, 20%, 1),
		900: hsla(0, 100%, 10%, 1),
		950: hsla(0, 100%, 5%, 1)
	),

	'yellow': (
		50: hsla(54, 100%, 95%, 1),
		100: hsla(54, 100%, 90%, 1),
		200: hsla(54, 100%, 80%, 1),
		300: hsla(54, 100%, 70%, 1),
		400: hsla(54, 100%, 60%, 1),
		500: hsla(54, 100%, 50%, 1),
		600: hsla(54, 100%, 40%, 1),
		700: hsla(54, 100%, 30%, 1),
		800: hsla(54, 100%, 20%, 1),
		900: hsla(54, 100%, 10%, 1),
		950: hsla(54, 100%, 5%, 1)
	),

	'gray': (
		50: hsla(210, 17%, 98%, 1),
		100: hsla(210, 17%, 95%, 1),
		200: hsla(210, 16%, 93%, 1),
		300: hsla(210, 14%, 89%, 1),
		400: hsla(210, 14%, 83%, 1),
		500: hsla(210, 11%, 71%, 1),
		600: hsla(210, 7%, 56%, 1),
		700: hsla(210, 9%, 31%, 1),
		800: hsla(210, 10%, 23%, 1),
		900: hsla(210, 11%, 15%, 1),
		950: hsla(210, 11%, 6%, 1)
	),

	// Neutral colors as single values
	'white': hsla(0, 0%, 100%, 1),
	'black': hsla(0, 0%, 0%, 1)
) !default;

/**
 * Get a color value from the palette
 * @param {String} $color - Color name (blue, green, red, etc.)
 * @param {Number|String} $shade - Shade (50-950) or name (white/black)
 * @return {Color} The color value
 */
@function get-color-primitive($color, $shade: map.get($_CONFIG, 'default-shade')) {
	@if $color == 'white' or $color == 'black' {
		@return map.get($COLORS, $color);
	} @else {
		@return map.get(map.get($COLORS, $color), $shade);
	}
}

// Export for use in other files
$PRIMITIVE_COLOR_SCALE: $_CONFIG;
$PRIMITIVE_COLOR: $COLORS;

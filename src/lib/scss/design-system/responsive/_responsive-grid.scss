// Responsive/_responsive-grid.scss
// Renamed from _grid.scss

@use 'sass:map';
@use 'sass:math';
@use '../base/global-variables' as gv;
@use 'responsive-breakpoints' as breakpoints;

// Grid configuration
$grid-columns: 12 !default;
$grid-gutter-width: 1.5rem !default;
$grid-row-columns: 6 !default;

// Container padding
$container-padding-x: 1rem !default;

// Responsive containers
$container-max-widths: (
	'sm': 540px,
	'md': 720px,
	'lg': 960px,
	'xl': 1140px,
	'xxl': 1320px
) !default;

// Grid system mixins
@mixin make-container($padding-x: $container-padding-x) {
	width: 100%;
	padding-right: $padding-x;
	padding-left: $padding-x;
	margin-right: auto;
	margin-left: auto;
}

@mixin make-container-max-widths($max-widths: $container-max-widths) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include breakpoints.media-breakpoint-up($breakpoint) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row($gutter: $grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-right: math.div($gutter, -2);
	margin-left: math.div($gutter, -2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
	position: relative;
	width: 100%;
	padding-right: math.div($gutter, 2);
	padding-left: math.div($gutter, 2);
}

@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage(math.div($size, $columns));
	max-width: percentage(math.div($size, $columns));
}

@mixin make-col-auto() {
	flex: 0 0 auto;
	width: auto;
	max-width: 100%;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: math.div($size, $columns);
	margin-left: if($num == 0, 0, percentage($num));
}

// Grid classes
@mixin grid-classes {
	.container {
		@include make-container();
		@include make-container-max-widths();
	}

	.container-fluid {
		@include make-container();
	}

	@each $breakpoint, $container-max-width in $container-max-widths {
		.container-#{$breakpoint} {
			@include make-container();
		}

		@include breakpoints.media-breakpoint-up($breakpoint) {
			%responsive-container-#{$breakpoint} {
				max-width: $container-max-width;
			}

			.container-#{$breakpoint} {
				@extend %responsive-container-#{$breakpoint};
			}
		}
	}

	.row {
		@include make-row();
	}

	.no-gutters {
		margin-right: 0;
		margin-left: 0;

		> .col,
		> [class*='col-'] {
			padding-right: 0;
			padding-left: 0;
		}
	}

	@for $i from 1 through $grid-row-columns {
		.row-cols-#{$i} {
			> * {
				flex: 0 0 percentage(math.div(1, $i));
				max-width: percentage(math.div(1, $i));
			}
		}
	}

	.col {
		flex-basis: 0;
		flex-grow: 1;
		max-width: 100%;
	}

	.col-auto {
		@include make-col-auto();
	}

	@for $i from 1 through $grid-columns {
		.col-#{$i} {
			@include make-col($i);
		}
	}

	@for $i from 0 through ($grid-columns - 1) {
		@if $i > 0 {
			.offset-#{$i} {
				@include make-col-offset($i);
			}
		}
	}

	@each $breakpoint in map-keys(breakpoints.$breakpoints) {
		@include breakpoints.media-breakpoint-up($breakpoint) {
			.col-#{$breakpoint} {
				flex-basis: 0;
				flex-grow: 1;
				max-width: 100%;
			}

			.col-#{$breakpoint}-auto {
				@include make-col-auto();
			}

			@for $i from 1 through $grid-columns {
				.col-#{$breakpoint}-#{$i} {
					@include make-col($i);
				}
			}

			@for $i from 0 through ($grid-columns - 1) {
				@if $i > 0 {
					.offset-#{$breakpoint}-#{$i} {
						@include make-col-offset($i);
					}
				}
			}

			@for $i from 1 through $grid-row-columns {
				.row-cols-#{$breakpoint}-#{$i} {
					> * {
						flex: 0 0 percentage(math.div(1, $i));
						max-width: percentage(math.div(1, $i));
					}
				}
			}
		}
	}
}
